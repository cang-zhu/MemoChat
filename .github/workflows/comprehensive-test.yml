name: Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # 每日凌晨2点运行

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black bandit safety
          
      - name: Python code formatting check
        run: black --check src/backend/
        
      - name: Python linting
        run: flake8 src/backend/
        
      - name: Security scan
        run: |
          bandit -r src/backend/
          safety check
          
      - name: Install Node dependencies
        run: npm ci
        
      - name: JavaScript linting
        run: npm run lint

  # 后端单元测试
  backend-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('src/backend/requirements.txt') }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/backend/requirements.txt
          pip install pytest pytest-cov pytest-mock
          
      - name: Run backend unit tests
        run: |
          cd src/backend
          pytest ../../tests/unit/backend/ -v --cov=. --cov-report=xml
          
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        uses: codecov/codecov-action@v3
        with:
          file: ./src/backend/coverage.xml
          flags: backend

  # 前端单元测试
  frontend-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: ['16', '18', '20']
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Cache Node dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run frontend unit tests
        run: npm run test:unit:frontend
        
      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18'
        uses: codecov/codecov-action@v3
        with:
          flags: frontend

  # 集成测试
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      # 如果需要数据库或其他服务
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/backend/requirements.txt
          pip install pytest pytest-cov requests
          npm ci
          
      - name: Start backend server
        run: |
          cd src/backend
          python server.py &
          sleep 10  # 等待服务器启动
          
      - name: Run integration tests
        run: pytest tests/integration/ -v
        
      - name: Test with real data
        run: |
          pytest tests/integration/ -v -m real_data

  # E2E 测试
  e2e-tests:
    runs-on: ${{ matrix.os }}
    needs: [integration-tests]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/backend/requirements.txt
          npm ci
          
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Build Electron app
        run: npm run build
        
      - name: Run E2E tests
        run: npm run test:e2e
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results-${{ matrix.os }}
          path: |
            test-results/
            playwright-report/

  # 性能测试
  performance-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/backend/requirements.txt
          pip install locust
          
      - name: Start backend server
        run: |
          cd src/backend
          python server.py &
          sleep 10
          
      - name: Run performance tests
        run: |
          locust -f tests/performance/locustfile.py --headless \
            --users 10 --spawn-rate 2 --run-time 60s \
            --host http://localhost:5000
            
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: locust_report.html

  # 安全测试
  security-tests:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # 测试报告汇总
  test-summary:
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, frontend-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate test summary
        run: |
          echo "# 测试结果汇总" > test-summary.md
          echo "" >> test-summary.md
          echo "## 测试状态" >> test-summary.md
          echo "- 代码质量: ${{ needs.code-quality.result }}" >> test-summary.md
          echo "- 后端测试: ${{ needs.backend-tests.result }}" >> test-summary.md
          echo "- 前端测试: ${{ needs.frontend-tests.result }}" >> test-summary.md
          echo "- 集成测试: ${{ needs.integration-tests.result }}" >> test-summary.md
          echo "- E2E测试: ${{ needs.e2e-tests.result }}" >> test-summary.md
          
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });